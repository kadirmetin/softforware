generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?
  Post          Post[]
  role          Role      @default(USER)
}

model Profile {
  id       String  @id @default(cuid()) @map("_id")
  bio      String?
  website  String?
  linkedin String?
  github   String?
  kaggle   String?
  twitter  String?
  user     User    @relation(fields: [userId], references: [id])

  userId String @unique
}

model Post {
  id         String    @id @default(cuid()) @map("_id")
  createdAt  DateTime  @default(now())
  title      String
  image      String
  content    String
  published  Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([authorId])
}

model Category {
  id        String @id @default(cuid()) @map("_id")
  name      String
  posts     Post[]
  postCount Int    @default(0)
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
